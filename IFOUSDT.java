IFOUSDT Protégé-OWL Java Code

CA.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: CA <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */
public interface CA extends TE {
   /* ***************************************************

    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */
   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}


CI.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: CI <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface CI extends I {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/isPartOf
    */

   /**
    * Gets all property values for the isPartOf property.<p>
    * 
    * @returns a collection of values for the isPartOf property.
    */
   Collection < ? extends O > getIsPartOf();

   /**
    * Checks if the class has a isPartOf property value.<p>
    * 
    * @return true if there is a isPartOf property value.
    */
   boolean hasIsPartOf();

   /**
    * Adds a isPartOf property value.<p>
    * 
    * @param newIsPartOf the isPartOf property value to be added
    */
   void addIsPartOf(O newIsPartOf);

   /**
    * Removes a isPartOf property value.<p>
    * 
    * @param oldIsPartOf the isPartOf property value to be removed.
    */
   void removeIsPartOf(O oldIsPartOf);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */
   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}

DA.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: DA <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface DA extends OP {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */
   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}


DoW.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: DoW <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface DoW extends CA {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */
   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}




DTI.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: DTI <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface DTI extends PI {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/after
    */

   /**
    * Gets all property values for the after property.<p>
    * 
    * @returns a collection of values for the after property.
    */
   Collection < ? extends TEn > getAfter();

   /**
    * Checks if the class has a after property value.<p>
    * 
    * @return true if there is a after property value.
    */
   boolean hasAfter();

   /**
    * Adds a after property value.<p>
    * 
    * @param newAfter the after property value to be added
    */
   void addAfter(TEn newAfter);

   /**
    * Removes a after property value.<p>
    * 
    * @param oldAfter the after property value to be removed.
    */
   void removeAfter(TEn oldAfter);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/before
    */

   /**
    * Gets all property values for the before property.<p>
    * 
    * @returns a collection of values for the before property.
    */
   Collection < ? extends TEn > getBefore();

   /**
    * Checks if the class has a before property value.<p>
    * 
    * @return true if there is a before property value.
    */
   boolean hasBefore();

   /**
    * Adds a before property value.<p>
    * 
    * @param newBefore the before property value to be added
    */
   void addBefore(TEn newBefore);

   /**
    * Removes a before property value.<p>
    * 
    * @param oldBefore the before property value to be removed.
    */
   void removeBefore(TEn oldBefore);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasBeginning
    */

   /**
    * Gets all property values for the hasBeginning property.<p>
    * 
    * @returns a collection of values for the hasBeginning property.
    */
   Collection < ? extends TI > getHasBeginning();

   /**
    * Checks if the class has a hasBeginning property value.<p>
    * 
    * @return true if there is a hasBeginning property value.
    */
   boolean hasHasBeginning();

   /**
    * Adds a hasBeginning property value.<p>
    * 
    * @param newHasBeginning the hasBeginning property value to be added
    */
   void addHasBeginning(TI newHasBeginning);

   /**
    * Removes a hasBeginning property value.<p>
    * 
    * @param oldHasBeginning the hasBeginning property value to be removed.
    */
   void removeHasBeginning(TI oldHasBeginning);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasEnd
    */

   /**
    * Gets all property values for the hasEnd property.<p>
    * 
    * @returns a collection of values for the hasEnd property.
    */
   Collection < ? extends TI > getHasEnd();

   /**
    * Checks if the class has a hasEnd property value.<p>
    * 
    * @return true if there is a hasEnd property value.
    */
   boolean hasHasEnd();

   /**
    * Adds a hasEnd property value.<p>
    * 
    * @param newHasEnd the hasEnd property value to be added
    */
   void addHasEnd(TI newHasEnd);

   /**
    * Removes a hasEnd property value.<p>
    * 
    * @param oldHasEnd the hasEnd property value to be removed.
    */
   void removeHasEnd(TI oldHasEnd);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasTemporalDuration
    */

   /**
    * Gets all property values for the hasTemporalDuration property.<p>
    * 
    * @returns a collection of values for the hasTemporalDuration property.
    */
   Collection < ? extends TD > getHasTemporalDuration();

   /**
    * Checks if the class has a hasTemporalDuration property value.<p>
    * 
    * @return true if there is a hasTemporalDuration property value.
    */
   boolean hasHasTemporalDuration();

   /**
    * Adds a hasTemporalDuration property value.<p>
    * 
    * @param newHasTemporalDuration the hasTemporalDuration property value to be added
    */
   void addHasTemporalDuration(TD newHasTemporalDuration);

   /**
    * Removes a hasTemporalDuration property value.<p>
    * 
    * @param oldHasTemporalDuration the hasTemporalDuration property value to be removed.
    */
   void removeHasTemporalDuration(TD oldHasTemporalDuration);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/inside
    */

   /**
    * Gets all property values for the inside property.<p>
    * 
    * @returns a collection of values for the inside property.
    */
   Collection < ? extends TI > getInside();

   /**
    * Checks if the class has a inside property value.<p>
    * 
    * @return true if there is a inside property value.
    */
   boolean hasInside();

   /**
    * Adds a inside property value.<p>
    * 
    * @param newInside the inside property value to be added
    */
   void addInside(TI newInside);

   /**
    * Removes a inside property value.<p>
    * 
    * @param oldInside the inside property value to be removed.
    */
   void removeInside(TI oldInside);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */
   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



DUR.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: DTI <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface DTI extends PI {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/after
    */

   /**
    * Gets all property values for the after property.<p>
    * 
    * @returns a collection of values for the after property.
    */
   Collection < ? extends TEn > getAfter();

   /**
    * Checks if the class has a after property value.<p>
    * 
    * @return true if there is a after property value.
    */
   boolean hasAfter();

   /**
    * Adds a after property value.<p>
    * 
    * @param newAfter the after property value to be added
    */
   void addAfter(TEn newAfter);

   /**
    * Removes a after property value.<p>
    * 
    * @param oldAfter the after property value to be removed.
    */
   void removeAfter(TEn oldAfter);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/before
    */

   /**
    * Gets all property values for the before property.<p>
    * 
    * @returns a collection of values for the before property.
    */
   Collection < ? extends TEn > getBefore();

   /**
    * Checks if the class has a before property value.<p>
    * 
    * @return true if there is a before property value.
    */
   boolean hasBefore();

   /**
    * Adds a before property value.<p>
    * 
    * @param newBefore the before property value to be added
    */
   void addBefore(TEn newBefore);

   /**
    * Removes a before property value.<p>
    * 
    * @param oldBefore the before property value to be removed.
    */
   void removeBefore(TEn oldBefore);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasBeginning
    */

   /**
    * Gets all property values for the hasBeginning property.<p>
    * 
    * @returns a collection of values for the hasBeginning property.
    */
   Collection < ? extends TI > getHasBeginning();

   /**
    * Checks if the class has a hasBeginning property value.<p>
    * 
    * @return true if there is a hasBeginning property value.
    */
   boolean hasHasBeginning();

   /**
    * Adds a hasBeginning property value.<p>
    * 
    * @param newHasBeginning the hasBeginning property value to be added
    */
   void addHasBeginning(TI newHasBeginning);

   /**
    * Removes a hasBeginning property value.<p>
    * 
    * @param oldHasBeginning the hasBeginning property value to be removed.
    */
   void removeHasBeginning(TI oldHasBeginning);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasEnd
    */

   /**
    * Gets all property values for the hasEnd property.<p>
    * 
    * @returns a collection of values for the hasEnd property.
    */
   Collection < ? extends TI > getHasEnd();

   /**
    * Checks if the class has a hasEnd property value.<p>
    * 
    * @return true if there is a hasEnd property value.
    */
   boolean hasHasEnd();

   /**
    * Adds a hasEnd property value.<p>
    * 
    * @param newHasEnd the hasEnd property value to be added
    */
   void addHasEnd(TI newHasEnd);

   /**
    * Removes a hasEnd property value.<p>
    * 
    * @param oldHasEnd the hasEnd property value to be removed.
    */
   void removeHasEnd(TI oldHasEnd);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasTemporalDuration
    */

   /**
    * Gets all property values for the hasTemporalDuration property.<p>
    * 
    * @returns a collection of values for the hasTemporalDuration property.
    */
   Collection < ? extends TD > getHasTemporalDuration();

   /**
    * Checks if the class has a hasTemporalDuration property value.<p>
    * 
    * @return true if there is a hasTemporalDuration property value.
    */
   boolean hasHasTemporalDuration();

   /**
    * Adds a hasTemporalDuration property value.<p>
    * 
    * @param newHasTemporalDuration the hasTemporalDuration property value to be added
    */
   void addHasTemporalDuration(TD newHasTemporalDuration);

   /**
    * Removes a hasTemporalDuration property value.<p>
    * 
    * @param oldHasTemporalDuration the hasTemporalDuration property value to be removed.
    */
   void removeHasTemporalDuration(TD oldHasTemporalDuration);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/inside
    */

   /**
    * Gets all property values for the inside property.<p>
    * 
    * @returns a collection of values for the inside property.
    */
   Collection < ? extends TI > getInside();

   /**
    * Checks if the class has a inside property value.<p>
    * 
    * @return true if there is a inside property value.
    */
   boolean hasInside();

   /**
    * Adds a inside property value.<p>
    * 
    * @param newInside the inside property value to be added
    */
   void addInside(TI newInside);

   /**
    * Removes a inside property value.<p>
    * 
    * @param oldInside the inside property value to be removed.
    */
   void removeInside(TI oldInside);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */
   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}


I.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: I <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface I extends SDT {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/isPartOf
    */

   /**
    * Gets all property values for the isPartOf property.<p>
    * 
    * @returns a collection of values for the isPartOf property.
    */
   Collection < ? extends O > getIsPartOf();

   /**
    * Checks if the class has a isPartOf property value.<p>
    * 
    * @return true if there is a isPartOf property value.
    */
   boolean hasIsPartOf();

   /**
    * Adds a isPartOf property value.<p>
    * 
    * @param newIsPartOf the isPartOf property value to be added
    */
   void addIsPartOf(O newIsPartOf);

   /**
    * Removes a isPartOf property value.<p>
    * 
    * @param oldIsPartOf the isPartOf property value to be removed.
    */
   void removeIsPartOf(O oldIsPartOf);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}


MI.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: MI <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface MI extends I {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/isPartOf
    */

   /**
    * Gets all property values for the isPartOf property.<p>
    * 
    * @returns a collection of values for the isPartOf property.
    */
   Collection < ? extends O > getIsPartOf();

   /**
    * Checks if the class has a isPartOf property value.<p>
    * 
    * @return true if there is a isPartOf property value.
    */
   boolean hasIsPartOf();

   /**
    * Adds a isPartOf property value.<p>
    * 
    * @param newIsPartOf the isPartOf property value to be added
    */
   void addIsPartOf(O newIsPartOf);

   /**
    * Removes a isPartOf property value.<p>
    * 
    * @param oldIsPartOf the isPartOf property value to be removed.
    */
   void removeIsPartOf(O oldIsPartOf);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();

   OWLOntology getOwlOntology();

   void delete();

}



MO.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: MO <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface MO extends O {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/isGeneratedBy
    */

   /**
    * Gets all property values for the isGeneratedBy property.<p>
    * 
    * @returns a collection of values for the isGeneratedBy property.
    */
   Collection < ? extends OP > getIsGeneratedBy();

   /**
    * Checks if the class has a isGeneratedBy property value.<p>
    * 
    * @return true if there is a isGeneratedBy property value.
    */
   boolean hasIsGeneratedBy();

   /**
    * Adds a isGeneratedBy property value.<p>
    * 
    * @param newIsGeneratedBy the isGeneratedBy property value to be added
    */
   void addIsGeneratedBy(OP newIsGeneratedBy);

   /**
    * Removes a isGeneratedBy property value.<p>
    * 
    * @param oldIsGeneratedBy the isGeneratedBy property value to be removed.
    */
   void removeIsGeneratedBy(OP oldIsGeneratedBy);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



MoY.java

package SDT;
import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: MoY <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface MoY extends CA {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



O.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: O <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface O extends SDT {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/isGeneratedBy
    */

   /**
    * Gets all property values for the isGeneratedBy property.<p>
    * 
    * @returns a collection of values for the isGeneratedBy property.
    */
   Collection < ? extends OP > getIsGeneratedBy();

   /**
    * Checks if the class has a isGeneratedBy property value.<p>
    * 
    * @return true if there is a isGeneratedBy property value.
    */
   boolean hasIsGeneratedBy();
   /**
    * Adds a isGeneratedBy property value.<p>
    * 
    * @param newIsGeneratedBy the isGeneratedBy property value to be added
    */
   void addIsGeneratedBy(OP newIsGeneratedBy);

   /**
    * Removes a isGeneratedBy property value.<p>
    * 
    * @param oldIsGeneratedBy the isGeneratedBy property value to be removed.
    */
   void removeIsGeneratedBy(OP oldIsGeneratedBy);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



Ontology.java

package SDT;
import SDT.impl.*;
import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: ontology<br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */
public class ontology implements CodeGenerationFactory {
   private OWLOntology ontology;
   private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
   private FactoryHelper delegate;
   private CodeGenerationInference inference;

   public ontology(OWLOntology ontology) {
      this(ontology, new SimpleInference(ontology));
   }

   public ontology(OWLOntology ontology, CodeGenerationInference inference) {
      this.ontology = ontology;
      this.inference = inference;
      javaMapping.initialize(ontology, inference);
      delegate = new FactoryHelper(ontology, inference);
   }

   public OWLOntology getOwlOntology() {
      return ontology;
   }

   public void saveOwlOntology() throws OWLOntologyStorageException {
      ontology.getOWLOntologyManager().saveOntology(ontology);
   }

   public void flushOwlReasoner() {
      delegate.flushOwlReasoner();
   }

   public boolean canAs(WrappedIndividual resource, Class < ? extends WrappedIndividual > javaInterface) {
      return javaMapping.canAs(resource, javaInterface);
   }

   public < X extends WrappedIndividual > X as(WrappedIndividual resource, Class < ? extends X > javaInterface) {
      return javaMapping.as(resource, javaInterface);
   }

   public Class < ? > getJavaInterfaceFromOwlClass(OWLClass cls) {
      return javaMapping.getJavaInterfaceFromOwlClass(cls);
   }

   public OWLClass getOwlClassFromJavaInterface(Class < ? > javaInterface) {
      return javaMapping.getOwlClassFromJavaInterface(javaInterface);
   }

   public CodeGenerationInference getInference() {
      return inference;
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/CA
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/CA", CA.class, DefaultCA.class);
   }

   /**
    * Creates an instance of type CA.  Modifies the underlying ontology.
    */
   public CA createCA(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CA, DefaultCA.class);
   }

   /**
    * Gets an instance of type CA with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public CA getCA(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CA, DefaultCA.class);
   }

   /**
    * Gets all instances of CA from the ontology.
    */
   public Collection < ? extends CA > getAllCAInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_CA, DefaultCA.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/DTI
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/DTI", DTI.class, DefaultDTI.class);
   }

   /**
    * Creates an instance of type DTI.  Modifies the underlying ontology.
    */
   public DTI createDTI(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DTI, DefaultDTI.class);
   }

   /**
    * Gets an instance of type DTI with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public DTI getDTI(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DTI, DefaultDTI.class);
   }

   /**
    * Gets all instances of DTI from the ontology.
    */
   public Collection < ? extends DTI > getAllDTIInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_DTI, DefaultDTI.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/DUR
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/DUR", DUR.class, DefaultDUR.class);
   }

   /**
    * Creates an instance of type DUR.  Modifies the underlying ontology.
    */
   public DUR createDUR(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DUR, DefaultDUR.class);
   }

   /**
    * Gets an instance of type DUR with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public DUR getDUR(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DUR, DefaultDUR.class);
   }

   /**
    * Gets all instances of DUR from the ontology.
    */
   public Collection < ? extends DUR > getAllDURInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_DUR, DefaultDUR.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/DoW
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/DoW", DoW.class, DefaultDoW.class);
   }

   /**
    * Creates an instance of type DoW.  Modifies the underlying ontology.
    */
   public DoW createDoW(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DOW, DefaultDoW.class);
   }

   /**
    * Gets an instance of type DoW with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public DoW getDoW(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DOW, DefaultDoW.class);
   }

   /**
    * Gets all instances of DoW from the ontology.
    */
   public Collection < ? extends DoW > getAllDoWInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_DOW, DefaultDoW.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/MoY
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/MoY", MoY.class, DefaultMoY.class);
   }

   /**
    * Creates an instance of type MoY.  Modifies the underlying ontology.
    */
   public MoY createMoY(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MOY, DefaultMoY.class);
   }

   /**
    * Gets an instance of type MoY with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public MoY getMoY(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MOY, DefaultMoY.class);
   }

   /**
    * Gets all instances of MoY from the ontology.
    */
   public Collection < ? extends MoY > getAllMoYInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_MOY, DefaultMoY.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/PI
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/PI", PI.class, DefaultPI.class);
   }

   /**
    * Creates an instance of type PI.  Modifies the underlying ontology.
    */
   public PI createPI(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PI, DefaultPI.class);
   }

   /**
    * Gets an instance of type PI with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public PI getPI(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PI, DefaultPI.class);
   }

   /**
    * Gets all instances of PI from the ontology.
    */
   public Collection < ? extends PI > getAllPIInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_PI, DefaultPI.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/PP
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/PP", PP.class, DefaultPP.class);
   }

   /**
    * Creates an instance of type PP.  Modifies the underlying ontology.
    */
   public PP createPP(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PP, DefaultPP.class);
   }

   /**
    * Gets an instance of type PP with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public PP getPP(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PP, DefaultPP.class);
   }

   /**
    * Gets all instances of PP from the ontology.
    */
   public Collection < ? extends PP > getAllPPInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_PP, DefaultPP.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TD
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TD", TD.class, DefaultTD.class);
   }

   /**
    * Creates an instance of type TD.  Modifies the underlying ontology.
    */
   public TD createTD(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TD, DefaultTD.class);
   }

   /**
    * Gets an instance of type TD with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TD getTD(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TD, DefaultTD.class);
   }

   /**
    * Gets all instances of TD from the ontology.
    */
   public Collection < ? extends TD > getAllTDInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TD, DefaultTD.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TE
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TE", TE.class, DefaultTE.class);
   }

   /**
    * Creates an instance of type TE.  Modifies the underlying ontology.
    */
   public TE createTE(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TE, DefaultTE.class);
   }

   /**
    * Gets an instance of type TE with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TE getTE(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TE, DefaultTE.class);
   }

   /**
    * Gets all instances of TE from the ontology.
    */
   public Collection < ? extends TE > getAllTEInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TE, DefaultTE.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TEn
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TEn", TEn.class, DefaultTEn.class);
   }

   /**
    * Creates an instance of type TEn.  Modifies the underlying ontology.
    */
   public TEn createTEn(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TEN, DefaultTEn.class);
   }

   /**
    * Gets an instance of type TEn with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TEn getTEn(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TEN, DefaultTEn.class);
   }

   /**
    * Gets all instances of TEn from the ontology.
    */
   public Collection < ? extends TEn > getAllTEnInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TEN, DefaultTEn.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TI
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TI", TI.class, DefaultTI.class);
   }

   /**
    * Creates an instance of type TI.  Modifies the underlying ontology.
    */
   public TI createTI(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TI, DefaultTI.class);
   }

   /**
    * Gets an instance of type TI with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TI getTI(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TI, DefaultTI.class);
   }

   /**
    * Gets all instances of TI from the ontology.
    */
   public Collection < ? extends TI > getAllTIInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TI, DefaultTI.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TP
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TP", TP.class, DefaultTP.class);
   }

   /**
    * Creates an instance of type TP.  Modifies the underlying ontology.
    */
   public TP createTP(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TP, DefaultTP.class);
   }

   /**
    * Gets an instance of type TP with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TP getTP(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TP, DefaultTP.class);
   }

   /**
    * Gets all instances of TP from the ontology.
    */
   public Collection < ? extends TP > getAllTPInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TP, DefaultTP.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TPo
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TPo", TPo.class, DefaultTPo.class);
   }

   /**
    * Creates an instance of type TPo.  Modifies the underlying ontology.
    */
   public TPo createTPo(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TPO, DefaultTPo.class);
   }

   /**
    * Gets an instance of type TPo with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TPo getTPo(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TPO, DefaultTPo.class);
   }

   /**
    * Gets all instances of TPo from the ontology.
    */
   public Collection < ? extends TPo > getAllTPoInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TPO, DefaultTPo.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TRS
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TRS", TRS.class, DefaultTRS.class);
   }

   /**
    * Creates an instance of type TRS.  Modifies the underlying ontology.
    */
   public TRS createTRS(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRS, DefaultTRS.class);
   }

   /**
    * Gets an instance of type TRS with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TRS getTRS(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRS, DefaultTRS.class);
   }

   /**
    * Gets all instances of TRS from the ontology.
    */
   public Collection < ? extends TRS > getAllTRSInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRS, DefaultTRS.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TU
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TU", TU.class, DefaultTU.class);
   }

   /**
    * Creates an instance of type TU.  Modifies the underlying ontology.
    */
   public TU createTU(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TU, DefaultTU.class);
   }

   /**
    * Gets an instance of type TU with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TU getTU(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TU, DefaultTU.class);
   }

   /**
    * Gets all instances of TU from the ontology.
    */
   public Collection < ? extends TU > getAllTUInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TU, DefaultTU.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TZ
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TZ", TZ.class, DefaultTZ.class);
   }

   /**
    * Creates an instance of type TZ.  Modifies the underlying ontology.
    */
   public TZ createTZ(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TZ, DefaultTZ.class);
   }

   /**
    * Gets an instance of type TZ with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TZ getTZ(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TZ, DefaultTZ.class);
   }

   /**
    * Gets all instances of TZ from the ontology.
    */
   public Collection < ? extends TZ > getAllTZInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TZ, DefaultTZ.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TiIn
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/TiIn", TiIn.class, DefaultTiIn.class);
   }

   /**
    * Creates an instance of type TiIn.  Modifies the underlying ontology.
    */
   public TiIn createTiIn(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TIIN, DefaultTiIn.class);
   }

   /**
    * Gets an instance of type TiIn with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public TiIn getTiIn(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TIIN, DefaultTiIn.class);
   }

   /**
    * Gets all instances of TiIn from the ontology.
    */
   public Collection < ? extends TiIn > getAllTiInInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TIIN, DefaultTiIn.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/Timing
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/Timing", Timing.class, DefaultTiming.class);
   }

   /**
    * Creates an instance of type Timing.  Modifies the underlying ontology.
    */
   public Timing createTiming(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TIMING, DefaultTiming.class);
   }

   /**
    * Gets an instance of type Timing with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public Timing getTiming(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TIMING, DefaultTiming.class);
   }

   /**
    * Gets all instances of Timing from the ontology.
    */
   public Collection < ? extends Timing > getAllTimingInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TIMING, DefaultTiming.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/Tracing
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/Tracing", Tracing.class, DefaultTracing.class);
   }

   /**
    * Creates an instance of type Tracing.  Modifies the underlying ontology.
    */
   public Tracing createTracing(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TRACING, DefaultTracing.class);
   }

   /**
    * Gets an instance of type Tracing with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public Tracing getTracing(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TRACING, DefaultTracing.class);
   }

   /**
    * Gets all instances of Tracing from the ontology.
    */
   public Collection < ? extends Tracing > getAllTracingInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_TRACING, DefaultTracing.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/YE
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/YE", YE.class, DefaultYE.class);
   }

   /**
    * Creates an instance of type YE.  Modifies the underlying ontology.
    */
   public YE createYE(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_YE, DefaultYE.class);
   }

   /**
    * Gets an instance of type YE with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public YE getYE(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_YE, DefaultYE.class);
   }

   /**
    * Gets all instances of YE from the ontology.
    */
   public Collection < ? extends YE > getAllYEInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_YE, DefaultYE.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/CI
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/CI", CI.class, DefaultCI.class);
   }

   /**
    * Creates an instance of type CI.  Modifies the underlying ontology.
    */
   public CI createCI(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CI, DefaultCI.class);
   }

   /**
    * Gets an instance of type CI with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public CI getCI(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CI, DefaultCI.class);
   }

   /**
    * Gets all instances of CI from the ontology.
    */
   public Collection < ? extends CI > getAllCIInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_CI, DefaultCI.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/DA
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/DA", DA.class, DefaultDA.class);
   }

   /**
    * Creates an instance of type DA.  Modifies the underlying ontology.
    */
   public DA createDA(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DA, DefaultDA.class);
   }

   /**
    * Gets an instance of type DA with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public DA getDA(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DA, DefaultDA.class);
   }

   /**
    * Gets all instances of DA from the ontology.
    */
   public Collection < ? extends DA > getAllDAInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_DA, DefaultDA.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/I
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/I", I.class, DefaultI.class);
   }

   /**
    * Creates an instance of type I.  Modifies the underlying ontology.
    */
   public I createI(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_I, DefaultI.class);
   }

   /**
    * Gets an instance of type I with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public I getI(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_I, DefaultI.class);
   }

   /**
    * Gets all instances of I from the ontology.
    */
   public Collection < ? extends I > getAllIInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_I, DefaultI.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/MI
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/MI", MI.class, DefaultMI.class);
   }

   /**
    * Creates an instance of type MI.  Modifies the underlying ontology.
    */
   public MI createMI(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MI, DefaultMI.class);
   }

   /**
    * Gets an instance of type MI with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public MI getMI(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MI, DefaultMI.class);
   }

   /**
    * Gets all instances of MI from the ontology.
    */
   public Collection < ? extends MI > getAllMIInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_MI, DefaultMI.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/MO
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/MO", MO.class, DefaultMO.class);
   }

   /**
    * Creates an instance of type MO.  Modifies the underlying ontology.
    */
   public MO createMO(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MO, DefaultMO.class);
   }

   /**
    * Gets an instance of type MO with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public MO getMO(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MO, DefaultMO.class);
   }

   /**
    * Gets all instances of MO from the ontology.
    */
   public Collection < ? extends MO > getAllMOInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_MO, DefaultMO.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/O
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/O", O.class, DefaultO.class);
   }

   /**
    * Creates an instance of type O.  Modifies the underlying ontology.
    */
   public O createO(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_O, DefaultO.class);
   }

   /**
    * Gets an instance of type O with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public O getO(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_O, DefaultO.class);
   }

   /**
    * Gets all instances of O from the ontology.
    */
   public Collection < ? extends O > getAllOInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_O, DefaultO.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/OP
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/OP", OP.class, DefaultOP.class);
   }

   /**
    * Creates an instance of type OP.  Modifies the underlying ontology.
    */
   public OP createOP(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OP, DefaultOP.class);
   }

   /**
    * Gets an instance of type OP with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public OP getOP(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OP, DefaultOP.class);
   }

   /**
    * Gets all instances of OP from the ontology.
    */
   public Collection < ? extends OP > getAllOPInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_OP, DefaultOP.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/SA
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/SA", SA.class, DefaultSA.class);
   }

   /**
    * Creates an instance of type SA.  Modifies the underlying ontology.
    */
   public SA createSA(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SA, DefaultSA.class);
   }

   /**
    * Gets an instance of type SA with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public SA getSA(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SA, DefaultSA.class);
   }

   /**
    * Gets all instances of SA from the ontology.
    */
   public Collection < ? extends SA > getAllSAInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_SA, DefaultSA.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/SDT
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/SDT", SDT.class, DefaultSDT.class);
   }

   /**
    * Creates an instance of type SDT.  Modifies the underlying ontology.
    */
   public SDT createSDT(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SDT, DefaultSDT.class);
   }

   /**
    * Gets an instance of type SDT with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public SDT getSDT(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SDT, DefaultSDT.class);
   }

   /**
    * Gets all instances of SDT from the ontology.
    */
   public Collection < ? extends SDT > getAllSDTInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_SDT, DefaultSDT.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/T
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/T", T.class, DefaultT.class);
   }

   /**
    * Creates an instance of type T.  Modifies the underlying ontology.
    */
   public T createT(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_T, DefaultT.class);
   }

   /**
    * Gets an instance of type T with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public T getT(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_T, DefaultT.class);
   }

   /**
    * Gets all instances of T from the ontology.
    */
   public Collection < ? extends T > getAllTInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_T, DefaultT.class);
   }

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/UO
    */

   {
      javaMapping.add("http://www.semanticweb.org/neji/ontologies/2021/2/UO", UO.class, DefaultUO.class);
   }

   /**
    * Creates an instance of type UO.  Modifies the underlying ontology.
    */
   public UO createUO(String name) {
      return delegate.createWrappedIndividual(name, Vocabulary.CLASS_UO, DefaultUO.class);
   }

   /**
    * Gets an instance of type UO with the given name.  Does not modify the underlying ontology.
    * @param name the name of the OWL named individual to be retrieved.
    */
   public UO getUO(String name) {
      return delegate.getWrappedIndividual(name, Vocabulary.CLASS_UO, DefaultUO.class);
   }

   /**
    * Gets all instances of UO from the ontology.
    */
   public Collection < ? extends UO > getAllUOInstances() {
      return delegate.getWrappedIndividuals(Vocabulary.CLASS_UO, DefaultUO.class);
   }

}




OP.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: OP <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface OP extends SDT {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



PI.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: PI <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface PI extends TiIn {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/after
    */

   /**
    * Gets all property values for the after property.<p>
    * 
    * @returns a collection of values for the after property.
    */
   Collection < ? extends TEn > getAfter();

   /**
    * Checks if the class has a after property value.<p>
    * 
    * @return true if there is a after property value.
    */
   boolean hasAfter();

   /**
    * Adds a after property value.<p>
    * 
    * @param newAfter the after property value to be added
    */
   void addAfter(TEn newAfter);

   /**
    * Removes a after property value.<p>
    * 
    * @param oldAfter the after property value to be removed.
    */
   void removeAfter(TEn oldAfter);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/before
    */

   /**
    * Gets all property values for the before property.<p>
    * 
    * @returns a collection of values for the before property.
    */
   Collection < ? extends TEn > getBefore();

   /**
    * Checks if the class has a before property value.<p>
    * 
    * @return true if there is a before property value.
    */
   boolean hasBefore();

   /**
    * Adds a before property value.<p>
    * 
    * @param newBefore the before property value to be added
    */
   void addBefore(TEn newBefore);

   /**
    * Removes a before property value.<p>
    * 
    * @param oldBefore the before property value to be removed.
    */
   void removeBefore(TEn oldBefore);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasBeginning
    */

   /**
    * Gets all property values for the hasBeginning property.<p>
    * 
    * @returns a collection of values for the hasBeginning property.
    */
   Collection < ? extends TI > getHasBeginning();

   /**
    * Checks if the class has a hasBeginning property value.<p>
    * 
    * @return true if there is a hasBeginning property value.
    */
   boolean hasHasBeginning();

   /**
    * Adds a hasBeginning property value.<p>
    * 
    * @param newHasBeginning the hasBeginning property value to be added
    */
   void addHasBeginning(TI newHasBeginning);

   /**
    * Removes a hasBeginning property value.<p>
    * 
    * @param oldHasBeginning the hasBeginning property value to be removed.
    */
   void removeHasBeginning(TI oldHasBeginning);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasEnd
    */

   /**
    * Gets all property values for the hasEnd property.<p>
    * 
    * @returns a collection of values for the hasEnd property.
    */
   Collection < ? extends TI > getHasEnd();

   /**
    * Checks if the class has a hasEnd property value.<p>
    * 
    * @return true if there is a hasEnd property value.
    */
   boolean hasHasEnd();

   /**
    * Adds a hasEnd property value.<p>
    * 
    * @param newHasEnd the hasEnd property value to be added
    */
   void addHasEnd(TI newHasEnd);

   /**
    * Removes a hasEnd property value.<p>
    * 
    * @param oldHasEnd the hasEnd property value to be removed.
    */
   void removeHasEnd(TI oldHasEnd);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasTemporalDuration
    */

   /**
    * Gets all property values for the hasTemporalDuration property.<p>
    * 
    * @returns a collection of values for the hasTemporalDuration property.
    */
   Collection < ? extends TD > getHasTemporalDuration();

   /**
    * Checks if the class has a hasTemporalDuration property value.<p>
    * 
    * @return true if there is a hasTemporalDuration property value.
    */
   boolean hasHasTemporalDuration();

   /**
    * Adds a hasTemporalDuration property value.<p>
    * 
    * @param newHasTemporalDuration the hasTemporalDuration property value to be added
    */
   void addHasTemporalDuration(TD newHasTemporalDuration);

   /**
    * Removes a hasTemporalDuration property value.<p>
    * 
    * @param oldHasTemporalDuration the hasTemporalDuration property value to be removed.
    */
   void removeHasTemporalDuration(TD oldHasTemporalDuration);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/inside
    */

   /**
    * Gets all property values for the inside property.<p>
    * 
    * @returns a collection of values for the inside property.
    */
   Collection < ? extends TI > getInside();

   /**
    * Checks if the class has a inside property value.<p>
    * 
    * @return true if there is a inside property value.
    */
   boolean hasInside();

   /**
    * Adds a inside property value.<p>
    * 
    * @param newInside the inside property value to be added
    */
   void addInside(TI newInside);

   /**
    * Removes a inside property value.<p>
    * 
    * @param oldInside the inside property value to be removed.
    */
   void removeInside(TI oldInside);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}




PP.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: PP <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface PP extends Timing {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}




SA.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: SA <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface SA extends OP {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



SDT.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: SDT <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface SDT extends WrappedIndividual {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



T.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: T <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface T extends OP {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



TD.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TD <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TD extends TE {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}




TE.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TE <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TE extends Timing {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();
   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



TEn.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TEn <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TEn extends TE {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/after
    */

   /**
    * Gets all property values for the after property.<p>
    * 
    * @returns a collection of values for the after property.
    */
   Collection < ? extends TEn > getAfter();

   /**
    * Checks if the class has a after property value.<p>
    * 
    * @return true if there is a after property value.
    */
   boolean hasAfter();

   /**
    * Adds a after property value.<p>
    * 
    * @param newAfter the after property value to be added
    */
   void addAfter(TEn newAfter);

   /**
    * Removes a after property value.<p>
    * 
    * @param oldAfter the after property value to be removed.
    */
   void removeAfter(TEn oldAfter);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/before
    */

   /**
    * Gets all property values for the before property.<p>
    * 
    * @returns a collection of values for the before property.
    */
   Collection < ? extends TEn > getBefore();

   /**
    * Checks if the class has a before property value.<p>
    * 
    * @return true if there is a before property value.
    */
   boolean hasBefore();

   /**
    * Adds a before property value.<p>
    * 
    * @param newBefore the before property value to be added
    */
   void addBefore(TEn newBefore);

   /**
    * Removes a before property value.<p>
    * 
    * @param oldBefore the before property value to be removed.
    */
   void removeBefore(TEn oldBefore);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasBeginning
    */

   /**
    * Gets all property values for the hasBeginning property.<p>
    * 
    * @returns a collection of values for the hasBeginning property.
    */
   Collection < ? extends TI > getHasBeginning();

   /**
    * Checks if the class has a hasBeginning property value.<p>
    * 
    * @return true if there is a hasBeginning property value.
    */
   boolean hasHasBeginning();

   /**
    * Adds a hasBeginning property value.<p>
    * 
    * @param newHasBeginning the hasBeginning property value to be added
    */
   void addHasBeginning(TI newHasBeginning);

   /**
    * Removes a hasBeginning property value.<p>
    * 
    * @param oldHasBeginning the hasBeginning property value to be removed.
    */
   void removeHasBeginning(TI oldHasBeginning);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasEnd
    */

   /**
    * Gets all property values for the hasEnd property.<p>
    * 
    * @returns a collection of values for the hasEnd property.
    */
   Collection < ? extends TI > getHasEnd();

   /**
    * Checks if the class has a hasEnd property value.<p>
    * 
    * @return true if there is a hasEnd property value.
    */
   boolean hasHasEnd();

   /**
    * Adds a hasEnd property value.<p>
    * 
    * @param newHasEnd the hasEnd property value to be added
    */
   void addHasEnd(TI newHasEnd);

   /**
    * Removes a hasEnd property value.<p>
    * 
    * @param oldHasEnd the hasEnd property value to be removed.
    */
   void removeHasEnd(TI oldHasEnd);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasTemporalDuration
    */

   /**
    * Gets all property values for the hasTemporalDuration property.<p>
    * 
    * @returns a collection of values for the hasTemporalDuration property.
    */
   Collection < ? extends TD > getHasTemporalDuration();

   /**
    * Checks if the class has a hasTemporalDuration property value.<p>
    * 
    * @return true if there is a hasTemporalDuration property value.
    */
   boolean hasHasTemporalDuration();

   /**
    * Adds a hasTemporalDuration property value.<p>
    * 
    * @param newHasTemporalDuration the hasTemporalDuration property value to be added
    */
   void addHasTemporalDuration(TD newHasTemporalDuration);

   /**
    * Removes a hasTemporalDuration property value.<p>
    * 
    * @param oldHasTemporalDuration the hasTemporalDuration property value to be removed.
    */
   void removeHasTemporalDuration(TD oldHasTemporalDuration);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}




TI.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TI <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TI extends TEn {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/after
    */

   /**
    * Gets all property values for the after property.<p>
    * 
    * @returns a collection of values for the after property.
    */
   Collection < ? extends TEn > getAfter();

   /**
    * Checks if the class has a after property value.<p>
    * 
    * @return true if there is a after property value.
    */
   boolean hasAfter();

   /**
    * Adds a after property value.<p>
    * 
    * @param newAfter the after property value to be added
    */
   void addAfter(TEn newAfter);

   /**
    * Removes a after property value.<p>
    * 
    * @param oldAfter the after property value to be removed.
    */
   void removeAfter(TEn oldAfter);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/before
    */

   /**
    * Gets all property values for the before property.<p>
    * 
    * @returns a collection of values for the before property.
    */
   Collection < ? extends TEn > getBefore();

   /**
    * Checks if the class has a before property value.<p>
    * 
    * @return true if there is a before property value.
    */
   boolean hasBefore();

   /**
    * Adds a before property value.<p>
    * 
    * @param newBefore the before property value to be added
    */
   void addBefore(TEn newBefore);

   /**
    * Removes a before property value.<p>
    * 
    * @param oldBefore the before property value to be removed.
    */
   void removeBefore(TEn oldBefore);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasBeginning
    */

   /**
    * Gets all property values for the hasBeginning property.<p>
    * 
    * @returns a collection of values for the hasBeginning property.
    */
   Collection < ? extends TI > getHasBeginning();

   /**
    * Checks if the class has a hasBeginning property value.<p>
    * 
    * @return true if there is a hasBeginning property value.
    */
   boolean hasHasBeginning();

   /**
    * Adds a hasBeginning property value.<p>
    * 
    * @param newHasBeginning the hasBeginning property value to be added
    */
   void addHasBeginning(TI newHasBeginning);

   /**
    * Removes a hasBeginning property value.<p>
    * 
    * @param oldHasBeginning the hasBeginning property value to be removed.
    */
   void removeHasBeginning(TI oldHasBeginning);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasEnd
    */

   /**
    * Gets all property values for the hasEnd property.<p>
    * 
    * @returns a collection of values for the hasEnd property.
    */
   Collection < ? extends TI > getHasEnd();

   /**
    * Checks if the class has a hasEnd property value.<p>
    * 
    * @return true if there is a hasEnd property value.
    */
   boolean hasHasEnd();

   /**
    * Adds a hasEnd property value.<p>
    * 
    * @param newHasEnd the hasEnd property value to be added
    */
   void addHasEnd(TI newHasEnd);

   /**
    * Removes a hasEnd property value.<p>
    * 
    * @param oldHasEnd the hasEnd property value to be removed.
    */
   void removeHasEnd(TI oldHasEnd);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasTemporalDuration
    */

   /**
    * Gets all property values for the hasTemporalDuration property.<p>
    * 
    * @returns a collection of values for the hasTemporalDuration property.
    */
   Collection < ? extends TD > getHasTemporalDuration();

   /**
    * Checks if the class has a hasTemporalDuration property value.<p>
    * 
    * @return true if there is a hasTemporalDuration property value.
    */
   boolean hasHasTemporalDuration();

   /**
    * Adds a hasTemporalDuration property value.<p>
    * 
    * @param newHasTemporalDuration the hasTemporalDuration property value to be added
    */
   void addHasTemporalDuration(TD newHasTemporalDuration);

   /**
    * Removes a hasTemporalDuration property value.<p>
    * 
    * @param oldHasTemporalDuration the hasTemporalDuration property value to be removed.
    */
   void removeHasTemporalDuration(TD oldHasTemporalDuration);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



TiIn.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TiIn <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TiIn extends TEn {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/after
    */

   /**
    * Gets all property values for the after property.<p>
    * 
    * @returns a collection of values for the after property.
    */
   Collection < ? extends TEn > getAfter();

   /**
    * Checks if the class has a after property value.<p>
    * 
    * @return true if there is a after property value.
    */
   boolean hasAfter();

   /**
    * Adds a after property value.<p>
    * 
    * @param newAfter the after property value to be added
    */
   void addAfter(TEn newAfter);

   /**
    * Removes a after property value.<p>
    * 
    * @param oldAfter the after property value to be removed.
    */
   void removeAfter(TEn oldAfter);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/before
    */

   /**
    * Gets all property values for the before property.<p>
    * 
    * @returns a collection of values for the before property.
    */
   Collection < ? extends TEn > getBefore();

   /**
    * Checks if the class has a before property value.<p>
    * 
    * @return true if there is a before property value.
    */
   boolean hasBefore();

   /**
    * Adds a before property value.<p>
    * 
    * @param newBefore the before property value to be added
    */
   void addBefore(TEn newBefore);

   /**
    * Removes a before property value.<p>
    * 
    * @param oldBefore the before property value to be removed.
    */
   void removeBefore(TEn oldBefore);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasBeginning
    */

   /**
    * Gets all property values for the hasBeginning property.<p>
    * 
    * @returns a collection of values for the hasBeginning property.
    */
   Collection < ? extends TI > getHasBeginning();

   /**
    * Checks if the class has a hasBeginning property value.<p>
    * 
    * @return true if there is a hasBeginning property value.
    */
   boolean hasHasBeginning();

   /**
    * Adds a hasBeginning property value.<p>
    * 
    * @param newHasBeginning the hasBeginning property value to be added
    */
   void addHasBeginning(TI newHasBeginning);

   /**
    * Removes a hasBeginning property value.<p>
    * 
    * @param oldHasBeginning the hasBeginning property value to be removed.
    */
   void removeHasBeginning(TI oldHasBeginning);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasEnd
    */

   /**
    * Gets all property values for the hasEnd property.<p>
    * 
    * @returns a collection of values for the hasEnd property.
    */
   Collection < ? extends TI > getHasEnd();

   /**
    * Checks if the class has a hasEnd property value.<p>
    * 
    * @return true if there is a hasEnd property value.
    */
   boolean hasHasEnd();

   /**
    * Adds a hasEnd property value.<p>
    * 
    * @param newHasEnd the hasEnd property value to be added
    */
   void addHasEnd(TI newHasEnd);

   /**
    * Removes a hasEnd property value.<p>
    * 
    * @param oldHasEnd the hasEnd property value to be removed.
    */
   void removeHasEnd(TI oldHasEnd);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasTemporalDuration
    */

   /**
    * Gets all property values for the hasTemporalDuration property.<p>
    * 
    * @returns a collection of values for the hasTemporalDuration property.
    */
   Collection < ? extends TD > getHasTemporalDuration();

   /**
    * Checks if the class has a hasTemporalDuration property value.<p>
    * 
    * @return true if there is a hasTemporalDuration property value.
    */
   boolean hasHasTemporalDuration();

   /**
    * Adds a hasTemporalDuration property value.<p>
    * 
    * @param newHasTemporalDuration the hasTemporalDuration property value to be added
    */
   void addHasTemporalDuration(TD newHasTemporalDuration);

   /**
    * Removes a hasTemporalDuration property value.<p>
    * 
    * @param oldHasTemporalDuration the hasTemporalDuration property value to be removed.
    */
   void removeHasTemporalDuration(TD oldHasTemporalDuration);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/inside
    */

   /**
    * Gets all property values for the inside property.<p>
    * 
    * @returns a collection of values for the inside property.
    */
   Collection < ? extends TI > getInside();

   /**
    * Checks if the class has a inside property value.<p>
    * 
    * @return true if there is a inside property value.
    */
   boolean hasInside();

   /**
    * Adds a inside property value.<p>
    * 
    * @param newInside the inside property value to be added
    */
   void addInside(TI newInside);

   /**
    * Removes a inside property value.<p>
    * 
    * @param oldInside the inside property value to be removed.
    */
   void removeInside(TI oldInside);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



Timing.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Timing <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface Timing extends DA {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



TP.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TP <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TP extends TE {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasTRS
    */

   /**
    * Gets all property values for the hasTRS property.<p>
    * 
    * @returns a collection of values for the hasTRS property.
    */
   Collection < ? extends TRS > getHasTRS();

   /**
    * Checks if the class has a hasTRS property value.<p>
    * 
    * @return true if there is a hasTRS property value.
    */
   boolean hasHasTRS();

   /**
    * Adds a hasTRS property value.<p>
    * 
    * @param newHasTRS the hasTRS property value to be added
    */
   void addHasTRS(TRS newHasTRS);

   /**
    * Removes a hasTRS property value.<p>
    * 
    * @param oldHasTRS the hasTRS property value to be removed.
    */
   void removeHasTRS(TRS oldHasTRS);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



TPo.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TPo <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TPo extends TP {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/hasTRS
    */

   /**
    * Gets all property values for the hasTRS property.<p>
    * 
    * @returns a collection of values for the hasTRS property.
    */
   Collection < ? extends TRS > getHasTRS();

   /**
    * Checks if the class has a hasTRS property value.<p>
    * 
    * @return true if there is a hasTRS property value.
    */
   boolean hasHasTRS();

   /**
    * Adds a hasTRS property value.<p>
    * 
    * @param newHasTRS the hasTRS property value to be added
    */
   void addHasTRS(TRS newHasTRS);

   /**
    * Removes a hasTRS property value.<p>
    * 
    * @param oldHasTRS the hasTRS property value to be removed.
    */
   void removeHasTRS(TRS oldHasTRS);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/nominalPosition
    */

   /**
    * Gets all property values for the nominalPosition property.<p>
    * 
    * @returns a collection of values for the nominalPosition property.
    */
   Collection < ? extends WrappedIndividual > getNominalPosition();

   /**
    * Checks if the class has a nominalPosition property value.<p>
    * 
    * @return true if there is a nominalPosition property value.
    */
   boolean hasNominalPosition();

   /**
    * Adds a nominalPosition property value.<p>
    * 
    * @param newNominalPosition the nominalPosition property value to be added
    */
   void addNominalPosition(WrappedIndividual newNominalPosition);

   /**
    * Removes a nominalPosition property value.<p>
    * 
    * @param oldNominalPosition the nominalPosition property value to be removed.
    */
   void removeNominalPosition(WrappedIndividual oldNominalPosition);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/numericPosition
    */

   /**
    * Gets all property values for the numericPosition property.<p>
    * 
    * @returns a collection of values for the numericPosition property.
    */
   Collection < ? extends WrappedIndividual > getNumericPosition();

   /**
    * Checks if the class has a numericPosition property value.<p>
    * 
    * @return true if there is a numericPosition property value.
    */
   boolean hasNumericPosition();

   /**
    * Adds a numericPosition property value.<p>
    * 
    * @param newNumericPosition the numericPosition property value to be added
    */
   void addNumericPosition(WrappedIndividual newNumericPosition);

   /**
    * Removes a numericPosition property value.<p>
    * 
    * @param oldNumericPosition the numericPosition property value to be removed.
    */
   void removeNumericPosition(WrappedIndividual oldNumericPosition);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



Tracing.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Tracing <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface Tracing extends DA {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



TRS.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TRS <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TRS extends TE {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}




TU.java

package SDT;
	
import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TU <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TU extends TD {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();
   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}




TZ.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: TZ <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface TZ extends TE {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}




UO.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: UO <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface UO extends O {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/isGeneratedBy
    */

   /**
    * Gets all property values for the isGeneratedBy property.<p>
    * 
    * @returns a collection of values for the isGeneratedBy property.
    */
   Collection < ? extends OP > getIsGeneratedBy();

   /**
    * Checks if the class has a isGeneratedBy property value.<p>
    * 
    * @return true if there is a isGeneratedBy property value.
    */
   boolean hasIsGeneratedBy();

   /**
    * Adds a isGeneratedBy property value.<p>
    * 
    * @param newIsGeneratedBy the isGeneratedBy property value to be added
    */
   void addIsGeneratedBy(OP newIsGeneratedBy);

   /**
    * Removes a isGeneratedBy property value.<p>
    * 
    * @param oldIsGeneratedBy the isGeneratedBy property value to be removed.
    */
   void removeIsGeneratedBy(OP oldIsGeneratedBy);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */
   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}



Vocabulary.java

package SDT;

import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLDataFactory;
import org.semanticweb.owlapi.model.OWLDataProperty;
import org.semanticweb.owlapi.model.OWLObjectProperty;

/**
 * Vocabulary class to provide access to the Manchester OWL API representatives for 
 * various entities in the ontology used to generate this code.<p> 
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: ${javaClass}
 *
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public class Vocabulary {

   private static final OWLDataFactory factory = OWLManager.createOWLOntologyManager().getOWLDataFactory();

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/CA
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class CA.<p>
    * 
    */
   public static final OWLClass CLASS_CA = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/CA"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/DTI
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class DTI.<p>
    * 
    */
   public static final OWLClass CLASS_DTI = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/DTI"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/DUR
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class DUR.<p>
    * 
    */
   public static final OWLClass CLASS_DUR = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/DUR"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/DoW
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class DOW.<p>
    * 
    */
   public static final OWLClass CLASS_DOW = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/DoW"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/MoY
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class MOY.<p>
    * 
    */
   public static final OWLClass CLASS_MOY = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/MoY"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/PI
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class PI.<p>
    * 
    */
   public static final OWLClass CLASS_PI = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/PI"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/PP
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class PP.<p>
    * 
    */
   public static final OWLClass CLASS_PP = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/PP"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TD
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TD.<p>
    * 
    */
   public static final OWLClass CLASS_TD = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TD"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TE
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TE.<p>
    * 
    */
   public static final OWLClass CLASS_TE = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TE"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TEn
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TEN.<p>
    * 
    */
   public static final OWLClass CLASS_TEN = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TEn"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TI
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TI.<p>
    * 
    */
   public static final OWLClass CLASS_TI = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TI"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TP
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TP.<p>
    * 
    */
   public static final OWLClass CLASS_TP = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TP"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TPo
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TPO.<p>
    * 
    */
   public static final OWLClass CLASS_TPO = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TPo"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TRS
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TRS.<p>
    * 
    */
   public static final OWLClass CLASS_TRS = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TRS"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TU
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TU.<p>
    * 
    */
   public static final OWLClass CLASS_TU = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TU"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TZ
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TZ.<p>
    * 
    */
   public static final OWLClass CLASS_TZ = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TZ"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/TiIn
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TIIN.<p>
    * 
    */
   public static final OWLClass CLASS_TIIN = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/TiIn"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/Timing
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TIMING.<p>
    * 
    */
   public static final OWLClass CLASS_TIMING = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/Timing"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/Tracing
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class TRACING.<p>
    * 
    */
   public static final OWLClass CLASS_TRACING = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/Tracing"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/YE
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class YE.<p>
    * 
    */
   public static final OWLClass CLASS_YE = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/YE"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/CI
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class CI.<p>
    * 
    */
   public static final OWLClass CLASS_CI = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/CI"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/DA
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class DA.<p>
    * 
    */
   public static final OWLClass CLASS_DA = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/DA"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/I
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class I.<p>
    * 
    */
   public static final OWLClass CLASS_I = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/I"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/MI
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class MI.<p>
    * 
    */
   public static final OWLClass CLASS_MI = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/MI"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/MO
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class MO.<p>
    * 
    */
   public static final OWLClass CLASS_MO = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/MO"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/O
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class O.<p>
    * 
    */
   public static final OWLClass CLASS_O = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/O"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/OP
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class OP.<p>
    * 
    */
   public static final OWLClass CLASS_OP = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/OP"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/SA
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class SA.<p>
    * 
    */
   public static final OWLClass CLASS_SA = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/SA"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/SDT
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class SDT.<p>
    * 
    */
   public static final OWLClass CLASS_SDT = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/SDT"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/T
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class T.<p>
    * 
    */
   public static final OWLClass CLASS_T = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/T"));

   /* ***************************************************
    * Class http://www.semanticweb.org/neji/ontologies/2021/2/UO
    */

   /**
    * A constant to give access to the Manchester OWL api representation of the class UO.<p>
    * 
    */
   public static final OWLClass CLASS_UO = factory.getOWLClass(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/UO"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/after
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property AFTER.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_AFTER = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/after"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/before
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property BEFORE.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_BEFORE = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/before"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/day
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property DAY.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_DAY = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/day"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/hasBeginning
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property HASBEGINNING.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_HASBEGINNING = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/hasBeginning"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/hasDuration
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property HASDURATION.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_HASDURATION = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/hasDuration"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/hasEnd
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property HASEND.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_HASEND = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/hasEnd"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/hasName
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property HASNAME.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_HASNAME = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/hasName"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/hasTRS
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property HASTRS.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_HASTRS = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/hasTRS"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/hasTemporalDuration
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property HASTEMPORALDURATION.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_HASTEMPORALDURATION = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/hasTemporalDuration"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/hasTime
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property HASTIME.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_HASTIME = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/hasTime"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/hour
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property HOUR.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_HOUR = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/hour"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/inside
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property INSIDE.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_INSIDE = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/inside"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/minute
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property MINUTE.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_MINUTE = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/minute"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/month
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property MONTH.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_MONTH = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/month"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/nominalPosition
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property NOMINALPOSITION.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_NOMINALPOSITION = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/nominalPosition"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/numericDuration
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property NUMERICDURATION.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_NUMERICDURATION = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/numericDuration"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/numericPosition
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property NUMERICPOSITION.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_NUMERICPOSITION = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/numericPosition"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/second
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property SECOND.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_SECOND = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/second"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/unitType
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property UNITTYPE.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_UNITTYPE = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/unitType"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/version
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property VERSION.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_VERSION = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/version"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/week
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property WEEK.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_WEEK = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/week"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/year
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property YEAR.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_YEAR = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/year"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property FUNCTIONS.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_FUNCTIONS = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/functions"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/2/isGeneratedBy
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property ISGENERATEDBY.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_ISGENERATEDBY = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/isGeneratedBy"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/2/isPartOf
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property ISPARTOF.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_ISPARTOF = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/isPartOf"));

   /* ***************************************************
    * Object Property http://www.semanticweb.org/neji/ontologies/2021/2/isresultof
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property ISRESULTOF.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_ISRESULTOF = factory.getOWLObjectProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/isresultof"));

   /* ***************************************************
    * Object Property http://www.w3.org/2002/07/owl#topObjectProperty
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the object property TOPOBJECTPROPERTY.<p>
    * 
    */
   public static final OWLObjectProperty OBJECT_PROPERTY_TOPOBJECTPROPERTY = factory.getOWLObjectProperty(IRI.create("http://www.w3.org/2002/07/owl#topObjectProperty"));

   /* ***************************************************
    * Data Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the data property GENERALDAY.<p>
    * 
    */
   public static final OWLDataProperty DATA_PROPERTY_GENERALDAY = factory.getOWLDataProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/generalDay"));

   /* ***************************************************
    * Data Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the data property GENERALMONTH.<p>
    * 
    */
   public static final OWLDataProperty DATA_PROPERTY_GENERALMONTH = factory.getOWLDataProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/generalMonth"));

   /* ***************************************************
    * Data Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the data property GENERALYEAR.<p>
    * 
    */
   public static final OWLDataProperty DATA_PROPERTY_GENERALYEAR = factory.getOWLDataProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/generalYear"));

   /* ***************************************************
    * Data Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * A constant to give access to the Manchester OWL API representation of the data property FEATURE.<p>
    * 
    */
   public static final OWLDataProperty DATA_PROPERTY_FEATURE = factory.getOWLDataProperty(IRI.create("http://www.semanticweb.org/neji/ontologies/2021/2/feature"));

}




YE.java

package SDT;

import java.util.Collection;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: YE <br>
 * @version generated on Sat Jun 12 21:29:25 WAT 2021 by Tedlwis
 */

public interface YE extends CA {

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/functions
    */

   /**
    * Gets all property values for the functions property.<p>
    * 
    * @returns a collection of values for the functions property.
    */
   Collection < ? extends OP > getFunctions();

   /**
    * Checks if the class has a functions property value.<p>
    * 
    * @return true if there is a functions property value.
    */
   boolean hasFunctions();

   /**
    * Adds a functions property value.<p>
    * 
    * @param newFunctions the functions property value to be added
    */
   void addFunctions(OP newFunctions);

   /**
    * Removes a functions property value.<p>
    * 
    * @param oldFunctions the functions property value to be removed.
    */
   void removeFunctions(OP oldFunctions);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalDay
    */

   /**
    * Gets all property values for the generalDay property.<p>
    * 
    * @returns a collection of values for the generalDay property.
    */
   Collection < ? extends Object > getGeneralDay();

   /**
    * Checks if the class has a generalDay property value.<p>
    * 
    * @return true if there is a generalDay property value.
    */
   boolean hasGeneralDay();

   /**
    * Adds a generalDay property value.<p>
    * 
    * @param newGeneralDay the generalDay property value to be added
    */
   void addGeneralDay(Object newGeneralDay);

   /**
    * Removes a generalDay property value.<p>
    * 
    * @param oldGeneralDay the generalDay property value to be removed.
    */
   void removeGeneralDay(Object oldGeneralDay);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalMonth
    */

   /**
    * Gets all property values for the generalMonth property.<p>
    * 
    * @returns a collection of values for the generalMonth property.
    */
   Collection < ? extends Object > getGeneralMonth();

   /**
    * Checks if the class has a generalMonth property value.<p>
    * 
    * @return true if there is a generalMonth property value.
    */
   boolean hasGeneralMonth();

   /**
    * Adds a generalMonth property value.<p>
    * 
    * @param newGeneralMonth the generalMonth property value to be added
    */
   void addGeneralMonth(Object newGeneralMonth);

   /**
    * Removes a generalMonth property value.<p>
    * 
    * @param oldGeneralMonth the generalMonth property value to be removed.
    */
   void removeGeneralMonth(Object oldGeneralMonth);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/generalYear
    */

   /**
    * Gets all property values for the generalYear property.<p>
    * 
    * @returns a collection of values for the generalYear property.
    */
   Collection < ? extends Object > getGeneralYear();

   /**
    * Checks if the class has a generalYear property value.<p>
    * 
    * @return true if there is a generalYear property value.
    */
   boolean hasGeneralYear();

   /**
    * Adds a generalYear property value.<p>
    * 
    * @param newGeneralYear the generalYear property value to be added
    */
   void addGeneralYear(Object newGeneralYear);

   /**
    * Removes a generalYear property value.<p>
    * 
    * @param oldGeneralYear the generalYear property value to be removed.
    */
   void removeGeneralYear(Object oldGeneralYear);

   /* ***************************************************
    * Property http://www.semanticweb.org/neji/ontologies/2021/2/feature
    */

   /**
    * Gets all property values for the feature property.<p>
    * 
    * @returns a collection of values for the feature property.
    */
   Collection < ? extends Object > getFeature();

   /**
    * Checks if the class has a feature property value.<p>
    * 
    * @return true if there is a feature property value.
    */
   boolean hasFeature();

   /**
    * Adds a feature property value.<p>
    * 
    * @param newFeature the feature property value to be added
    */
   void addFeature(Object newFeature);

   /**
    * Removes a feature property value.<p>
    * 
    * @param oldFeature the feature property value to be removed.
    */
   void removeFeature(Object oldFeature);

   /* ***************************************************
    * Common interfaces
    */

   OWLNamedIndividual getOwlIndividual();
   OWLOntology getOwlOntology();
   void delete();
}




